// Generated by CoffeeScript 1.6.2
(function() {
  describe("OmniPlayer", function() {
    describe("#constructor", function() {
      beforeEach(function() {
        this.elementId = 'playerElement';
        this.videoId = 'testId';
        this.type = 'TEST';
        this.height = '300';
        this.width = '600';
        this.startSeconds = '200';
        this.endSeconds = '400';
        return this.player = new OmniPlayer({
          elementId: this.elementId,
          videoId: this.videoId,
          type: this.type,
          height: this.height,
          width: this.width,
          startSeconds: this.startSeconds,
          endSeconds: this.endSeconds
        });
      });
      it("sets the elementId to the given value", function() {
        return expect(this.player.elementId).toEqual(this.elementId);
      });
      it("sets the videoId to the given value", function() {
        return expect(this.player.videoId).toEqual(this.videoId);
      });
      it("sets the type to the given value", function() {
        return expect(this.player.type).toEqual(this.type);
      });
      it("sets the height to the given value", function() {
        return expect(this.player.height).toEqual(this.height);
      });
      it("sets the width to the given value", function() {
        return expect(this.player.width).toEqual(this.width);
      });
      it("sets the startSeconds to the given value", function() {
        return expect(this.player.startSeconds).toEqual(this.startSeconds);
      });
      it("sets the endSeconds to the given value", function() {
        return expect(this.player.endSeconds).toEqual(this.endSeconds);
      });
      return it('should call #[type].createPlayer', function() {
        spyOn(OmniPlayer[this.type], 'createPlayer');
        this.player2 = new OmniPlayer({
          elementId: this.elementId,
          videoId: this.videoId,
          type: this.type,
          height: this.height,
          width: this.width,
          startSeconds: this.startSeconds,
          endSeconds: this.endSeconds
        });
        return expect(OmniPlayer[this.type].createPlayer).toHaveBeenCalled();
      });
    });
    return describe("instance with a type of 'YT'", function() {
      beforeEach(function() {
        this.elementId = 'playerElement';
        this.videoId = 'testId';
        this.type = 'YT';
        this.height = '300';
        this.width = '600';
        this.startSeconds = '200';
        return this.endSeconds = '400';
      });
      xdescribe('window.onYouTubeIframeAPIReady', function() {});
      xdescribe('.YT.build', function() {});
      describe('.YT.setup', function() {
        beforeEach(function() {
          spyOn(OmniPlayer.YT, 'createPlayer');
          return this.player = new OmniPlayer({
            elementId: this.elementId,
            videoId: this.videoId,
            type: this.type,
            height: this.height,
            width: this.width,
            startSeconds: this.startSeconds,
            endSeconds: this.endSeconds
          });
        });
        it('creates a script element', function() {
          spyOn(document, 'createElement').andCallThrough();
          OmniPlayer.YT.setup();
          return expect(document.createElement).toHaveBeenCalledWith("script");
        });
        return it('gets the first script Tag', function() {
          spyOn(document, 'getElementsByTagName').andCallThrough();
          OmniPlayer.YT.setup();
          return expect(document.getElementsByTagName).toHaveBeenCalledWith("script");
        });
      });
      return describe('#[type].createPlayer', function() {
        describe('when OmniPlayer.loaded.YT is true', function() {
          beforeEach(function() {
            return OmniPlayer.loaded.YT = true;
          });
          return it('calls .YT.build', function() {
            spyOn(OmniPlayer.YT, 'build');
            this.player = new OmniPlayer({
              elementId: this.elementId,
              videoId: this.videoId,
              type: this.type,
              height: this.height,
              width: this.width,
              startSeconds: this.startSeconds,
              endSeconds: this.endSeconds
            });
            return expect(OmniPlayer.YT.build).toHaveBeenCalled();
          });
        });
        return describe('when OmniPlayer.loaded.YT is false', function() {
          beforeEach(function() {
            return OmniPlayer.loaded.YT = false;
          });
          it("creates a new window function called 'onYouTubeIframeAPIReady'", function() {
            this.player = new OmniPlayer({
              elementId: this.elementId,
              videoId: this.videoId,
              type: this.type,
              height: this.height,
              width: this.width,
              startSeconds: this.startSeconds,
              endSeconds: this.endSeconds
            });
            return expect(window.onYouTubeIframeAPIReady).toBeDefined();
          });
          return it('calls .YT.setup', function() {
            spyOn(OmniPlayer.YT, 'setup');
            this.player = new OmniPlayer({
              elementId: this.elementId,
              videoId: this.videoId,
              type: this.type,
              height: this.height,
              width: this.width,
              startSeconds: this.startSeconds,
              endSeconds: this.endSeconds
            });
            return expect(OmniPlayer.YT.setup).toHaveBeenCalled();
          });
        });
      });
    });
  });

}).call(this);
