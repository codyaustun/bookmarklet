// Generated by CoffeeScript 1.6.2
(function() {
  window.VideoClipper = (function() {
    VideoClipper.vid = "";

    VideoClipper.start_time = "";

    VideoClipper.end_time = "";

    VideoClipper.video_type = "";

    VideoClipper.answer_class = "bookMarklet-answer";

    VideoClipper.reel = 'http://web.mit.edu/colemanc/www/bookmarklet/images/film3Small.png';

    VideoClipper.modal_id = "";

    VideoClipper.player = false;

    VideoClipper.playerV = false;

    VideoClipper.caretPos = 0;

    function VideoClipper() {}

    VideoClipper.setup = function() {
      var that;

      that = VideoClipper;
      if ($("#bl").length === 0) {
        VideoClipper.generateSnippetBox();
      }
      if ($("#bl-vid").length === 0) {
        VideoClipper.generateVideoBox();
      }
      if ($("#bookMarklet-overlay").length === 0) {
        $("<div id='bookMarklet-overlay'></div>").appendTo("body");
      }
      $("#bookMarklet-overlay").click(function() {
        return VideoClipper.close_modal(VideoClipper.modal_id);
      });
      $(document).on("click", "." + VideoClipper.answer_class, function() {
        that.caretPos = that.getCaretPosition(this);
      });
      $(document).on("keyup", "." + VideoClipper.answer_class, function() {
        var div_text;

        that.caretPos = that.getCaretPosition(this);
        div_text = $(this).html();
        $(this).prev().val(div_text);
      });
      $(document).on("click", "[rel*=blModal]", function() {
        that.modalOpen(this);
      });
      $(".bl-start").click(function(e) {
        var curr_time;

        curr_time = VideoClipper.player.getCurrentTime();
        $("input[name='bl-start']").val(curr_time);
        that.checkErrors();
      });
      $(".bl-end").click(function(e) {
        var curr_time;

        curr_time = VideoClipper.player.getCurrentTime();
        $("input[name='bl-end']").val(curr_time);
        that.checkErrors();
      });
      $(".bl-done").click(function(e) {
        that.close_modal(VideoClipper.modal_id);
        that.update(that.generateTag());
      });
      return $(".bl-reset").click(function(e) {
        that.clearInputs();
        VideoClipper.player.loadVideoById(VideoClipper.vid, 0, "large");
      });
    };

    VideoClipper.close_modal = function(modal_id) {
      $("#bookMarklet-overlay").fadeOut(200);
      $(modal_id).css({
        display: "none"
      });
      if (modal_id === "#bl") {
        return VideoClipper.player.stopVideo();
      } else {
        if (VideoClipper.modal_id === "#bl-vid") {
          return VideoClipper.playerV.stopVideo();
        }
      }
    };

    VideoClipper.checkErrors = function() {
      VideoClipper.start_time = parseFloat($("input[name='bl-start']").val());
      VideoClipper.end_time = parseFloat($("input[name='bl-end']").val());
      if ((VideoClipper.start_time < VideoClipper.end_time || isNaN(VideoClipper.end_time)) && (!isNaN(VideoClipper.start_time))) {
        $("input[name='bl-start']").removeClass("bl-incorrect");
        $("input[name='bl-end']").removeClass("bl-incorrect");
        return true;
      } else {
        $("input[name='bl-start']").addClass("bl-incorrect");
        $("input[name='bl-end']").addClass("bl-incorrect");
        return false;
      }
    };

    VideoClipper.create = function(textareaid, videotype, videoid, button) {
      var blDataEncoded, dataString;

      $("#" + textareaid).each(function(index, element) {
        var content, h, w;

        w = $(element).width();
        h = $(element).height();
        content = $(element).val();
        $(element).after("<div></div>").css("display", "none").next().attr({
          contenteditable: "true"
        }).addClass(VideoClipper.answer_class).css({
          width: w,
          height: h
        });
      });
      dataString = VideoClipper.generateBLDataString({
        type: "generate",
        vid: videoid,
        vtype: videotype
      });
      blDataEncoded = encodeURI(dataString);
      if (button) {
        return $("." + VideoClipper.answer_class).after("<input type='button' value='Snippet'>").next().attr({
          "data-bl": blDataEncoded,
          rel: "blModal"
        });
      }
    };

    VideoClipper.getBLData = function(el) {
      var blData;

      blData = void 0;
      if (typeof ($(el).attr("data-bl")) !== "undefined") {
        blData = $.parseJSON(decodeURI($(el).attr("data-bl")));
      } else {
        if (typeof ($(el).text()) !== "undefined") {
          blData = $.parseJSON(decodeURI($(el).text()));
        }
      }
      return blData;
    };

    VideoClipper.modalOpen = function(el) {
      var blData, modal_width, that, url;

      that = VideoClipper;
      blData = that.getBLData(el);
      if (blData.type === "generate") {
        VideoClipper.vid = blData.video.id;
        VideoClipper.video_type = blData.video.type;
        url = "";
        if (VideoClipper.video_type === "yt") {
          url = "http://www.youtube.com/embed/" + VideoClipper.vid;
        }
        $(".bl-srcURL").attr("href", url);
        $(".bl-srcURL").text(url);
        that.clearInputs();
        if (VideoClipper.player === false) {
          VideoClipper.player = new window.YT.Player("bl-player", {
            videoId: VideoClipper.vid,
            events: {}
          });
        } else {
          VideoClipper.player.cueVideoById(VideoClipper.vid, 0, "large");
        }
      } else {
        VideoClipper.vid = blData.video.id;
        VideoClipper.start_time = blData.start;
        VideoClipper.end_time = blData.end;
        VideoClipper.video_type = blData.video.type;
        if (VideoClipper.playerV === false) {
          VideoClipper.playerV = new YT.Player("bl-playerV", {
            videoId: VideoClipper.vid,
            events: {
              onReady: that.YTOnPlayerReady
            }
          });
        } else {
          VideoClipper.playerV.cueVideoById({
            videoId: VideoClipper.vid,
            startSeconds: VideoClipper.start_time,
            endSeconds: VideoClipper.end_time,
            suggestedQuality: "large"
          });
        }
      }
      VideoClipper.modal_id = blData.modal;
      modal_width = $(VideoClipper.modal_id).outerWidth();
      $("#bookMarklet-overlay").css({
        display: "block",
        opacity: 0
      });
      $("#bookMarklet-overlay").fadeTo(200, 0.5);
      $(VideoClipper.modal_id).css({
        display: "block",
        position: "fixed",
        opacity: 0,
        "z-index": 11000,
        left: 50 + "%",
        "margin-left": -(modal_width / 2) + "px",
        top: "100px"
      });
      return $(VideoClipper.modal_id).fadeTo(200, 1);
    };

    VideoClipper.clearInputs = function() {
      $("input[name='bl-end']").val("");
      $("input[name='bl-start']").val("");
      $("input[name='bl-start']").removeClass("bl-incorrect");
      $("input[name='bl-end']").removeClass("bl-incorrect");
      return $(".bl-URL").text("Generated URL goes here");
    };

    VideoClipper.update = function(newLink) {
      var beginPos, blData, currContent, endPos, newContent, newVal, srcQues;

      $(".bl-URL").text(newLink);
      blData = encodeURI(VideoClipper.generateBLDataString({
        type: "generate"
      }));
      srcQues = "[data-bl='" + blData + "']";
      currContent = $("." + VideoClipper.answer_class).contents();
      newContent = [];
      beginPos = 0;
      endPos = 0;
      if (currContent.length === 0) {
        newContent = newLink;
      } else {
        currContent.each(function(i, e) {
          var back, eString, front;

          if (((e.nodeType === 3) || (e.nodeType === 1)) && (endPos < VideoClipper.caretPos)) {
            eString = "";
            if (e.nodeType === 3) {
              eString = e.data;
            } else {
              eString = e.text;
            }
            beginPos = endPos;
            endPos = endPos + eString.length;
            if (endPos >= VideoClipper.caretPos) {
              front = eString.substring(0, VideoClipper.caretPos - beginPos);
              back = eString.substring(VideoClipper.caretPos - beginPos, eString.length);
              newContent = newContent.concat(front);
              newContent = newContent.concat(newLink);
              newContent = newContent.concat(back);
            } else {
              newContent = newContent.concat(e);
            }
          } else {
            newContent = newContent.concat(e);
          }
        });
      }
      $("." + VideoClipper.answer_class).text("");
      $(newContent).each(function(i, e) {
        return $("." + VideoClipper.answer_class).append(e);
      });
      newVal = $("." + VideoClipper.answer_class).html();
      return $("." + VideoClipper.answer_class).prev().val(newVal);
    };

    VideoClipper.YTOnPlayerReady = function(event) {
      return event.target.cueVideoById({
        videoId: VideoClipper.vid,
        startSeconds: VideoClipper.start_time,
        endSeconds: VideoClipper.end_time,
        suggestedQuality: "large"
      });
    };

    VideoClipper.setup_yt = function() {
      var firstScriptTag, tag;

      tag = document.createElement("script");
      tag.src = "https://www.youtube.com/iframe_api";
      firstScriptTag = document.getElementsByTagName("script")[0];
      return firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    };

    VideoClipper.generateURL = function(obj) {
      var endTime, startTime, vidURL, videoID;

      obj = obj || {};
      vidURL = "http://www.youtube.com/v/";
      videoID = obj.vid || VideoClipper.vid;
      startTime = obj.start || VideoClipper.start_time;
      endTime = obj.end || VideoClipper.end_time;
      vidURL = vidURL + videoID + "&start=" + startTime + "&end=" + endTime + "&version=3";
      return vidURL;
    };

    VideoClipper.generateTag = function() {
      var blDataEncoded, dataString, end, newTag, start;

      VideoClipper.start_time = $("input[name='bl-start']").val();
      VideoClipper.end_time = $("input[name='bl-end']").val();
      if (VideoClipper.checkErrors()) {
        $("input[name='bl-start']").removeClass("bl-incorrect");
        $("input[name='bl-end']").removeClass("bl-incorrect");
        if (VideoClipper.end_time === "") {
          VideoClipper.end_time = VideoClipper.player.getDuration();
        }
        start = new Date(null);
        end = new Date(null);
        start.setSeconds(VideoClipper.start_time);
        end.setSeconds(VideoClipper.end_time);
        start = start.toTimeString().substr(3, 5);
        end = end.toTimeString().substr(3, 5);
        newTag = "";
        dataString = VideoClipper.generateBLDataString({
          type: "show"
        });
        blDataEncoded = encodeURI(dataString);
        newTag = $("<a rel='blModal' href='#bl-vid' class='bl'>" + blDataEncoded + "</a>").css({
          'background-image': VideoClipper.reel
        });
        return newTag;
      } else {
        return "";
      }
    };

    VideoClipper.generateBLDataString = function(obj) {
      var dataEnd, dataStart, dataString, dataVType, dataVid;

      obj = obj || {};
      dataString = "";
      dataVid = obj.vid || VideoClipper.vid;
      dataVType = obj.vtype || VideoClipper.video_type;
      if (obj.type === "generate") {
        dataString = "{\"type\": \"generate\", \"modal\": \"#bl\"," + "\"video\": {" + "\"id\": \"" + dataVid + "\", \"type\": \"" + dataVType + "\"}}";
      } else if (obj.type === "show") {
        dataStart = obj.start || VideoClipper.start_time;
        dataEnd = obj.end || VideoClipper.end_time;
        dataString = "{\"start\": \"" + dataStart + "\", \"end\": \"" + dataEnd + "\", \"type\": \"show" + "\", \"modal\": \"#bl-vid" + "\", \"video\": {" + "\"id\": \"" + dataVid + "\", \"type\": \"" + dataVType + "\"}}";
      }
      return dataString;
    };

    VideoClipper.generateVideoBox = function() {
      return $("<div id='bl-vid'><div class='bl-video-wrap'>" + "<div id='bl-playerV'></div>" + "</div></div>").appendTo("body");
    };

    VideoClipper.generateSnippetBox = function() {
      return $("<div id='bl'>" + "<div class='bl-top'>" + "<div class='bl-vid'>" + "<div id='bl-player'></div>" + "</div>" + "<div class='bl-controls'>" + "<div class='bl-title'>" + "<h1>Create a URL</h1>" + "</div>" + "<div class='bl-instructions'>" + "Click \"Start Time\" and \"End Time\" buttons," + "or by type in the time in the text boxes." + "</div>" + "<table class='bl-input'>" + "<tr>" + "<td>" + "<input class='bl-button bl-start' type='button' value='Start Time'>" + "</td>" + "<td>" + "</td>" + "<td>" + "<input class='bl-button bl-end' type='button' value='End Time'>" + "</td>" + "</tr>" + "<tr>" + "<td>" + "<input class='bl-data' type='text' name='bl-start'>" + "</td>" + "<td>" + "-" + "</td>" + "<td><input class='bl-data' type='text' name='bl-end'></td>" + "</tr>" + "<tr>" + "<td><input class='bl-button bl-done' type='button' value='Done'></td>" + "<td></td>" + "<td><input class='bl-button bl-reset' type='button' value='Reset'></td>" + "</tr>" + "</table>" + "<textarea class='bl-URL'>" + "Generated URL goes here" + "</textarea>" + "</div>" + "</div>" + "<div class='bl-bottom'>" + "Source URL:" + "<a class='bl-srcURL'></a>" + "</div>" + "</div>").appendTo("body");
    };

    VideoClipper.getCaretPosition = function(editableDiv) {
      var containerEl, range, sel, temp1, temp2;

      VideoClipper.caretPos = 0;
      containerEl = null;
      sel = void 0;
      range = void 0;
      if (window.getSelection) {
        sel = window.getSelection();
        if (sel.rangeCount) {
          range = sel.getRangeAt(0);
          if (range.commonAncestorContainer.parentNode === editableDiv) {
            temp1 = range.endContainer.data;
            temp2 = range.commonAncestorContainer.parentNode.innerHTML.replace(/&nbsp;/g, String.fromCharCode(160));
            temp2 = VideoClipper.stripHTML(temp2);
            VideoClipper.caretPos = range.endOffset + temp2.split(temp1)[0].length;
          }
        }
      }
      return VideoClipper.caretPos;
    };

    VideoClipper.stripHTML = function(html) {
      var tmp;

      tmp = document.createElement("DIV");
      tmp.innerHTML = html;
      return tmp.textContent || tmp.innerText;
    };

    return VideoClipper;

  }).call(this);

}).call(this);
