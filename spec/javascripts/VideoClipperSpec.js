// Generated by CoffeeScript 1.6.2
(function() {
  describe("VideoClipper", function() {
    it("should have VideoClipper class", function() {
      this.clippy = new VideoClipper;
      return expect(this.clippy).toBeDefined();
    });
    describe("when constructing", function() {
      beforeEach(function() {
        this.textareaId = 'bl-text';
        this.videoId = '8f7wj_RcqYk';
        return this.videoType = 'TEST';
      });
      afterEach(function() {
        return VideoClipper.cleanUp();
      });
      describe('with defaults', function() {
        beforeEach(function() {
          return this.clippy = new VideoClipper({
            textareaId: this.textareaId,
            videoId: this.videoId,
            videoType: this.videoType
          });
        });
        it("should use @textareaId for the instance's textareaId", function() {
          return expect(this.clippy.textareaId).toEqual(this.textareaId);
        });
        it("should use @videoId for the instance's videoId", function() {
          return expect(this.clippy.videoId).toEqual(this.videoId);
        });
        it("should use @videoType for the instance's videoType", function() {
          return expect(this.clippy.videoType).toEqual(this.videoType);
        });
        it("should use VideoClipper.reel for the instance's reel", function() {
          return expect(this.clippy.reel).toEqual(VideoClipper.reel);
        });
        it("should use VideoClipper.answerClass for the instance's answerClass", function() {
          return expect(this.clippy.answerClass).toEqual(VideoClipper.answerClass);
        });
        it("should use VideoClipper.generateHtml for the instance's generate", function() {
          return expect(this.clippy.generate).toEqual(VideoClipper.generateHtml);
        });
        return it('should generate a buttonId for the instance', function() {
          return expect(this.clippy.buttonId).toBeDefined();
        });
      });
      describe('without using defaults', function() {
        beforeEach(function() {
          this.answerClass = 'answer-class-test';
          this.reel = 'reel-test';
          this.buttonId = 'button-id-test';
          this.textareaId = 'bl-text';
          this.generate = false;
          this.mediaContentUrl = 'http://google.com';
          this.thumbnailUrl = 'https://www.google.com/imghp?hl=en&tab=wi&authuser=0';
          return this.clippy = new VideoClipper({
            textareaId: this.textareaId,
            videoId: this.videoId,
            videoType: this.videoType,
            generate: this.generate,
            reel: this.reel,
            buttonId: this.buttonId,
            answerClass: this.answerClass,
            mediaContentUrl: this.mediaContentUrl,
            thumbnailUrl: this.thumbnailUrl
          });
        });
        it("should use @textareaId for the instance's textareaId", function() {
          return expect(this.clippy.textareaId).toEqual(this.textareaId);
        });
        it("should use @videoId for the instance's videoId", function() {
          return expect(this.clippy.videoId).toEqual(this.videoId);
        });
        it("should use @videoType for the instance's videoType", function() {
          return expect(this.clippy.videoType).toEqual(this.videoType);
        });
        it("should use @mediaContentUrl for the instance's mediaContentUrl", function() {
          return expect(this.clippy.mediaContentUrl).toEqual(this.mediaContentUrl);
        });
        it("should use @thumbnailUrl for the instance's thumbnailUrl", function() {
          return expect(this.clippy.thumbnailUrl).toEqual(this.thumbnailUrl);
        });
        it("should use the given value for the instance's reel", function() {
          return expect(this.clippy.reel).toEqual(this.reel);
        });
        it("should use the given value for the instance's answerClass", function() {
          return expect(this.clippy.answerClass).toEqual(this.answerClass);
        });
        it("should use the given value for the instance's generate", function() {
          return expect(this.clippy.generate).toEqual(this.generate);
        });
        return it("should use the given value for the instance's buttonId", function() {
          return expect(this.clippy.buttonId).toEqual(this.buttonId);
        });
      });
      describe('when generate is true', function() {
        return it('should call #setup', function() {
          var clippy;

          spyOn(VideoClipper, 'generate');
          return clippy = new VideoClipper({
            textareaId: this.textareaId,
            videoId: this.videoId,
            videoType: this.videoType,
            generate: true
          });
        });
      });
      describe('when generate is false', function() {
        return it('should not call #setup', function() {
          var clippy;

          spyOn(VideoClipper, 'generate');
          clippy = new VideoClipper({
            textareaId: this.textareaId,
            videoId: this.videoId,
            videoType: this.videoType,
            generate: false
          });
          return expect(VideoClipper.generate).not.toHaveBeenCalled();
        });
      });
      return it('should add the new instance to VideoClipper.clippers', function() {
        var addedClipper, c, clippy, _i, _len, _ref;

        clippy = new VideoClipper({
          textareaId: this.textareaId,
          videoId: this.videoId,
          videoType: this.videoType,
          generate: true
        });
        addedClipper = false;
        _ref = VideoClipper.clippers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c = clippy) {
            addedClipper = true;
          }
        }
        return expect(addedClipper).toBeTruthy;
      });
    });
    describe('.generateQuestionBox', function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        textareaId = 'bl-text';
        this.selector = '#' + textareaId;
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          generate: false
        });
      });
      it('should only have one element specified by textareaId', function() {
        return expect($(this.selector).length).toBe(1);
      });
      it('should get height of the element with textareaId', function() {
        var heightSpy;

        heightSpy = spyOn($.fn, 'height');
        spyOn(this.clippy, 'generateQuestionBox').andCallThrough();
        this.clippy.generateQuestionBox();
        expect(this.clippy.generateQuestionBox).toHaveBeenCalled();
        expect($.fn.height).toHaveBeenCalled();
        return expect(heightSpy.mostRecentCall.object.selector).toEqual(this.selector);
      });
      it('should get width of the element with textareaId', function() {
        var widthSpy;

        widthSpy = spyOn($.fn, 'width');
        this.clippy.generateQuestionBox();
        expect($.fn.width).toHaveBeenCalled();
        return expect(widthSpy.mostRecentCall.object.selector).toEqual(this.selector);
      });
      it('should get the value of the element with textareaId', function() {
        var valSpy;

        valSpy = spyOn($.fn, 'val');
        this.clippy.generateQuestionBox();
        expect($.fn.val).toHaveBeenCalled();
        return expect(valSpy.mostRecentCall.object.selector).toEqual(this.selector);
      });
      it('should insert of an answerClass div after the textarea', function() {
        var textarea;

        this.clippy.generateQuestionBox();
        textarea = $(this.selector);
        expect(textarea.next()).toBe('div');
        return expect(textarea.next()).toHaveClass(this.clippy.answerClass);
      });
      it('should make the divcontenteditable', function() {
        var textarea;

        this.clippy.generateQuestionBox();
        textarea = $(this.selector);
        return expect(textarea.next()).toHaveAttr('contenteditable', 'true');
      });
      it('should make the div have the same height and width as the textarea', function() {
        var div, textarea;

        this.clippy.generateQuestionBox();
        textarea = $(this.selector);
        div = textarea.next();
        expect(div.height()).toEqual(textarea.height());
        return expect(div.width()).toEqual(textarea.width());
      });
      it('should generate a bl data string', function() {
        spyOn(VideoClipper, 'generateBLDataString');
        this.clippy.generateQuestionBox();
        return expect(VideoClipper.generateBLDataString).toHaveBeenCalledWith('generate', this.clippy);
      });
      describe('without a buttonId specified', function() {
        it('should create a button after the outputbox div', function() {
          var div;

          this.clippy.generateQuestionBox();
          div = $(this.selector).next();
          return expect(div.next()).toBe('input[type=button]');
        });
        it("should set the rel attribute of the button to 'blModal'", function() {
          var button;

          this.clippy.generateQuestionBox();
          button = $(this.selector).next().next();
          return expect(button).toHaveAttr('rel', 'blModal');
        });
        it('should store the encoded BLDataString in the bl-data attribute', function() {
          var blData, button, encoded;

          this.clippy.generateQuestionBox();
          button = $(this.selector).next().next();
          blData = VideoClipper.generateBLDataString('generate', this.clippy);
          encoded = encodeURI(blData);
          return expect(button).toHaveAttr('data-bl', encoded);
        });
        return it('should make the button respond to clicks', function() {
          this.clippy.generateQuestionBox();
          return expect($("#" + this.clippy.buttonId)).toHandle('click');
        });
      });
      return describe('with a buttonId specified', function() {
        beforeEach(function() {
          var textareaId;

          this.testID = "button-test";
          textareaId = 'bl-text';
          return this.clippy = new VideoClipper({
            textareaId: textareaId,
            videoId: '8f7wj_RcqYk',
            videoType: 'TEST',
            buttonId: this.testID,
            generate: false
          });
        });
        it("should set the rel attribute of the button to 'blModal'", function() {
          var button;

          this.clippy.generateQuestionBox();
          button = $('#' + this.testID);
          return expect(button).toHaveAttr('rel', 'blModal');
        });
        it('should store the encoded BLDataString in the bl-data attribute', function() {
          var blData, button, encoded;

          this.clippy.generateQuestionBox();
          button = $('#' + this.testID);
          blData = VideoClipper.generateBLDataString('generate', this.clippy);
          encoded = encodeURI(blData);
          return expect(button).toHaveAttr('data-bl', encoded);
        });
        return it('should make the button respond to clicks', function() {
          this.clippy.generateQuestionBox();
          return expect($("#" + this.clippy.buttonId)).toHandle('click');
        });
      });
    });
    describe('.generateOverlay', function() {
      beforeEach(function() {
        VideoClipper.cleanUp();
        loadFixtures('question.html');
        return this.clippy = new VideoClipper({
          textareaId: 'bl-text',
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          generate: false
        });
      });
      it("should create a bookMarklet-overlay div if doesn't exist", function() {
        var appendSpy;

        expect($("#bookMarklet-overlay").length).toEqual(0);
        appendSpy = spyOn($.fn, 'appendTo').andCallThrough();
        VideoClipper.generateOverlay();
        expect($("#bookMarklet-overlay").length).toEqual(1);
        return expect($.fn.appendTo).toHaveBeenCalled();
      });
      describe('and one already exists', function() {
        return it('should not create another overlay', function() {
          var appendSpy;

          VideoClipper.generateOverlay();
          expect($("#bookMarklet-overlay").length).toEqual(1);
          appendSpy = spyOn($.fn, 'appendTo').andCallThrough();
          VideoClipper.generateOverlay();
          expect($("#bookMarklet-overlay").length).toEqual(1);
          return expect($.fn.appendTo).not.toHaveBeenCalled();
        });
      });
      it('should make the overlay respond to click', function() {
        VideoClipper.generateOverlay();
        return expect($("#bookMarklet-overlay")).toHandle('click');
      });
      return describe('and the overlay is clicked', function() {
        return it('should call modal.close', function() {
          VideoClipper.generateOverlay();
          spyOn(VideoClipper.modal, "close").andCallThrough;
          $("#bookMarklet-overlay").click();
          return expect(VideoClipper.modal.close).toHaveBeenCalled();
        });
      });
    });
    describe(".generateSnippetBox", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID,
          generate: true
        });
        VideoClipper.player = new OmniPlayer({
          type: "TEST"
        });
        return VideoClipper.clipper = this.clippy;
      });
      it("should make the start button respond to clicks", function() {
        return expect($('.bl-start')).toHandle("click");
      });
      describe("and the start button is clicked", function() {
        it("should get the current time from the player", function() {
          spyOn(VideoClipper.player, 'getCurrentTime').andCallThrough();
          spyOn(VideoClipper, 'checkErrors');
          $('.bl-start').click();
          return expect(VideoClipper.player.getCurrentTime).toHaveBeenCalled();
        });
        it("should set the bl-start input to the current time", function() {
          var inputSelector, val, valSpy;

          val = 300;
          spyOn(VideoClipper.player, 'getCurrentTime').andReturn(val);
          spyOn(VideoClipper, 'checkErrors');
          inputSelector = "input[name='bl-start']";
          valSpy = spyOn($.fn, 'val').andCallThrough();
          $('.bl-start').click();
          expect($.fn.val).toHaveBeenCalledWith(VideoClipper.secondsToTime(val));
          return expect(valSpy.mostRecentCall.object.selector).toEqual(inputSelector);
        });
        return it("should check for errors", function() {
          spyOn(VideoClipper, 'checkErrors');
          $('.bl-start').click();
          return expect(VideoClipper.checkErrors).toHaveBeenCalled();
        });
      });
      it("should make the end button respond to clicks", function() {
        return expect($('.bl-end')).toHandle("click");
      });
      describe('and end button is clicked', function() {
        it("should get the current time from the player", function() {
          spyOn(VideoClipper.player, 'getCurrentTime').andCallThrough();
          spyOn(VideoClipper, 'checkErrors');
          $('.bl-end').click();
          return expect(VideoClipper.player.getCurrentTime).toHaveBeenCalled();
        });
        it("should set the bl-start input to the current time", function() {
          var inputSelector, val, valSpy;

          val = 300;
          spyOn(VideoClipper.player, 'getCurrentTime').andReturn(val);
          spyOn(VideoClipper, 'checkErrors');
          inputSelector = "input[name='bl-end']";
          valSpy = spyOn($.fn, 'val').andCallThrough();
          $('.bl-end').click();
          expect($.fn.val).toHaveBeenCalledWith(VideoClipper.secondsToTime(val));
          return expect(valSpy.mostRecentCall.object.selector).toEqual(inputSelector);
        });
        return it("should check for errors", function() {
          spyOn(VideoClipper, 'checkErrors');
          $('.bl-end').click();
          return expect(VideoClipper.checkErrors).toHaveBeenCalled();
        });
      });
      it("should make the reset button respond to clicks", function() {
        return expect($(".bl-reset")).toHandle("click");
      });
      describe('and the reset button is clicked', function() {
        it('should clear the snippet box inputs', function() {
          spyOn(VideoClipper, 'clearInputs');
          $('.bl-reset').click();
          return expect(VideoClipper.clearInputs).toHaveBeenCalled;
        });
        return it('should cue the video by id', function() {
          spyOn(VideoClipper.player, 'cueVideoById');
          $('.bl-reset').click();
          return expect(VideoClipper.player.cueVideoById).toHaveBeenCalled();
        });
      });
      it("should make the done button respond to clicks", function() {
        return expect($('.bl-done')).toHandle("click");
      });
      describe('and the done button is clicked', function() {
        it('should close the modal', function() {
          spyOn(VideoClipper.modal, 'close');
          $('.bl-done').click();
          return expect(VideoClipper.modal.close).toHaveBeenCalled();
        });
        it('should generate a new tag', function() {
          spyOn(VideoClipper, 'generateTag');
          $('.bl-done').click();
          return expect(VideoClipper.generateTag).toHaveBeenCalled();
        });
        return it('should use the generated tag to update', function() {
          var testString;

          testString = 'Testing 1 2 3';
          spyOn(VideoClipper, 'generateTag').andReturn(testString);
          spyOn(this.clippy, 'update');
          $('.bl-done').click();
          return expect(this.clippy.update).toHaveBeenCalledWith(testString);
        });
      });
      return it('should set VideoClipper prepared snippet to true', function() {
        return expect(VideoClipper.prepared.snippet).toBeTruthy();
      });
    });
    describe(".generateVideoBox", function() {
      describe('with a #bl-vid already', function() {
        beforeEach(function() {
          return VideoClipper.generateVideoBox();
        });
        afterEach(function() {
          return VideoClipper.cleanUp();
        });
        return it("should not add another #bl-vid div", function() {
          expect($('#bl-vid').length).toEqual(1);
          VideoClipper.generateVideoBox();
          return expect($('#bl-vid').length).toEqual(1);
        });
      });
      describe('without a #bl-vid already', function() {
        it('should add a #bl-vid div', function() {
          expect($('#bl-vid').length).toEqual(0);
          VideoClipper.generateVideoBox();
          return expect($('#bl-vid').length).toEqual(1);
        });
        return it('should have #bl-playerV inside #bl-vid', function() {
          VideoClipper.generateVideoBox();
          return expect($('#bl-vid').find('#bl-playerV').length).toEqual(1);
        });
      });
      return it('should return VideoClipper', function() {
        var result;

        result = VideoClipper.generateVideoBox();
        return expect(result).toEqual(VideoClipper);
      });
    });
    describe("#setup", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID,
          generate: false
        });
      });
      it("should generate a video box", function() {
        expect($('#bl-vid').length).toBe(0);
        spyOn(VideoClipper, 'generateVideoBox');
        this.clippy.setup();
        return expect(VideoClipper.generateVideoBox).toHaveBeenCalled();
      });
      it("should generate a snippet box", function() {
        expect($('#bl').length).toBe(0);
        spyOn(VideoClipper, 'generateSnippetBox');
        this.clippy.setup();
        return expect(VideoClipper.generateSnippetBox).toHaveBeenCalled();
      });
      it("should generate the question box", function() {
        spyOn(this.clippy, 'generateQuestionBox').andCallThrough();
        spyOn(VideoClipper, 'generateSnippetBox');
        this.clippy.setup();
        return expect(this.clippy.generateQuestionBox).toHaveBeenCalled();
      });
      it("should generate the video clipper overlay", function() {
        expect($('#bookmarklet-overlay').length).toBe(0);
        spyOn(VideoClipper, 'generateOverlay');
        this.clippy.setup();
        return expect(VideoClipper.generateOverlay).toHaveBeenCalled();
      });
      return describe('with a valid output box', function() {
        beforeEach(function() {
          var onSpy;

          onSpy = spyOn($.fn, 'on').andCallThrough();
          return this.clippy.setup();
        });
        it('should make the output box respond to clicks', function() {
          return expect($("." + this.clippy.answerClass)).toHandle('click');
        });
        return it('should make the output box respond to keyups', function() {
          return expect($("." + this.clippy.answerClass)).toHandle('keyup');
        });
      });
    });
    describe('.generate', function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID,
          generate: false
        });
      });
      describe('with a VideoClipper instance', function() {
        beforeEach(function() {
          this.clippy.generateQuestionBox();
          return loadFixtures('question.html');
        });
        it("should generate a snippet box", function() {
          expect($('#bl').length).toBe(0);
          spyOn(VideoClipper, 'generateSnippetBox');
          VideoClipper.generate(this.clippy);
          return expect(VideoClipper.generateSnippetBox).toHaveBeenCalledWith(this.clippy);
        });
        it("should generate the video clipper overlay", function() {
          expect($('#bookmarklet-overlay').length).toBe(0);
          spyOn(VideoClipper, 'generateOverlay');
          VideoClipper.generate(this.clippy);
          return expect(VideoClipper.generateOverlay).toHaveBeenCalled();
        });
        return it("should generate a video box", function() {
          expect($('#bl-vid').length).toBe(0);
          spyOn(VideoClipper, 'generateVideoBox');
          VideoClipper.generate(this.clippy);
          return expect(VideoClipper.generateVideoBox).toHaveBeenCalled();
        });
      });
      return describe('without a VideoClipper instance', function() {
        beforeEach(function() {
          return loadFixtures('answer.html');
        });
        it("should not generate a snippet box", function() {
          expect($('#bl').length).toBe(0);
          spyOn(VideoClipper, 'generateSnippetBox');
          VideoClipper.generate();
          expect($('#bl').length).toBe(0);
          return expect(VideoClipper.generateSnippetBox).not.toHaveBeenCalled();
        });
        it("should generate the video clipper overlay", function() {
          expect($('#bookmarklet-overlay').length).toBe(0);
          spyOn(VideoClipper, 'generateOverlay');
          VideoClipper.generate();
          return expect(VideoClipper.generateOverlay).toHaveBeenCalled();
        });
        it("should generate a video box", function() {
          expect($('#bl-vid').length).toBe(0);
          spyOn(VideoClipper, 'generateVideoBox');
          VideoClipper.generate();
          return expect(VideoClipper.generateVideoBox).toHaveBeenCalled();
        });
        it("should make video clips handle clicks", function() {
          VideoClipper.generate();
          return expect($('[rel*=blModal]')).toHandle('click');
        });
        it("adds a qtip to each '[rel*=blModal]'", function() {
          var qtipSpy;

          qtipSpy = spyOn($.fn, 'qtip');
          VideoClipper.generate();
          expect($.fn.qtip).toHaveBeenCalled();
          return $('[rel*=blModal]').each(function(index, element) {
            return expect(qtipSpy.calls[index].object).toBe($(element));
          });
        });
        return describe('when a video clip is click', function() {
          return it('should open the modal window', function() {
            spyOn(VideoClipper.modal, 'open');
            VideoClipper.generate();
            $('[rel*=blModal]').click();
            return expect(VideoClipper.modal.open).toHaveBeenCalled();
          });
        });
      });
    });
    describe('.cleanUp', function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
      });
      it('should remove the div with id of bl', function() {
        expect($('#bl')).toExist();
        VideoClipper.cleanUp();
        return expect($('#bl')).not.toExist();
      });
      it('should remove the div with id of bl-vid', function() {
        expect($('#bl-vid')).toExist();
        VideoClipper.cleanUp();
        return expect($('#bl-vid')).not.toExist();
      });
      it('should remove the div with id of bookMarklet-overlay', function() {
        expect($('#bookMarklet-overlay')).toExist();
        VideoClipper.cleanUp();
        return expect($('#bookMarklet-overlay')).not.toExist();
      });
      it('should set VideoClipper prepared snippet to false', function() {
        VideoClipper.cleanUp();
        return expect(VideoClipper.prepared.snippet).toBeFalsy();
      });
      return it('should remove all questionBoxs', function() {
        var removeSpy;

        removeSpy = spyOn($.fn, 'remove');
        VideoClipper.cleanUp();
        expect($.fn.remove).toHaveBeenCalled();
        return expect(removeSpy.mostRecentCall.object).toEqual(this.clippy.questionBox);
      });
    });
    describe(".modal.close", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
        return VideoClipper.modal.open($('#' + this.testID), this.clippy);
      });
      it("should fade out the overlay", function() {
        var fadeSpy;

        fadeSpy = spyOn($.fn, 'fadeOut');
        VideoClipper.modal.close(this.clippy.modalID);
        expect($.fn.fadeOut).toHaveBeenCalled();
        return expect(fadeSpy.mostRecentCall.object.selector).toEqual("#bookMarklet-overlay");
      });
      it("should hide the modal window", function() {
        expect($("#" + VideoClipper.modal.Id)).toBeVisible();
        VideoClipper.modal.close();
        return expect($("#" + VideoClipper.modal.Id)).toBeHidden();
      });
      return it("should stop the video player", function() {
        spyOn(VideoClipper.player, 'stopVideo');
        VideoClipper.modal.close(this.clippy.modalID);
        return expect(VideoClipper.player.stopVideo).toHaveBeenCalled();
      });
    });
    describe(".modal.open", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
        this.el = $('#' + this.testID);
        return this.blData = VideoClipper.getBLData(this.el);
      });
      afterEach(function() {
        return VideoClipper.modal.close();
      });
      it('should close any open modal windows', function() {
        spyOn(VideoClipper.modal, 'close');
        VideoClipper.modal.open(this.el, this.clippy);
        return expect(VideoClipper.modal.close).toHaveBeenCalled();
      });
      it("should get the data from the element", function() {
        spyOn(VideoClipper, 'getBLData').andReturn(this.blData);
        VideoClipper.modal.open(this.el, this.clippy);
        return expect(VideoClipper.getBLData).toHaveBeenCalledWith(this.el);
      });
      describe("with a snippet box", function() {
        beforeEach(function() {
          return spyOn(VideoClipper, 'getBLData').andReturn(this.blData);
        });
        it("should get video type and id", function() {
          VideoClipper.modal.open(this.el, this.clippy);
          expect(this.clippy.videoId).toEqual(this.blData.videoId);
          return expect(this.clippy.videoType).toEqual(this.blData.videoType);
        });
        it("should clear inputs", function() {
          spyOn(VideoClipper, 'clearInputs').andCallThrough();
          VideoClipper.modal.open(this.el, this.clippy);
          return expect(VideoClipper.clearInputs).toHaveBeenCalled();
        });
        it("should create a video player if it doesn't exist", function() {
          VideoClipper.modal.open(this.el, this.clippy);
          return expect(VideoClipper.player).toEqual(jasmine.any(OmniPlayer));
        });
        it("should show snippet box", function() {
          var fadeSpy;

          fadeSpy = spyOn($.fn, 'fadeTo').andCallThrough();
          VideoClipper.modal.open(this.el, this.clippy);
          expect($.fn.fadeTo).toHaveBeenCalled();
          return expect(fadeSpy.mostRecentCall.object.selector).toEqual('#bl');
        });
        return it("should show overlay", function() {
          var fadeSpy;

          fadeSpy = spyOn($.fn, 'fadeTo').andCallThrough();
          VideoClipper.modal.open(this.el, this.clippy);
          expect($.fn.fadeTo).toHaveBeenCalled();
          return expect(fadeSpy.calls[0].object.selector).toEqual('#bookMarklet-overlay');
        });
      });
      return describe("with a video box", function() {
        beforeEach(function() {
          this.clippy.startTime = '200';
          this.clippy.endTime = '300';
          this.blData = $.parseJSON(VideoClipper.generateBLDataString('show', this.clippy));
          return spyOn(VideoClipper, 'getBLData').andReturn(this.blData);
        });
        afterEach(function() {
          return VideoClipper.modal.close();
        });
        it("should get video type, id, start time and end time", function() {
          VideoClipper.modal.open(this.el);
          expect(this.clippy.videoId).toEqual(this.blData.videoId);
          expect(this.clippy.videoType).toEqual(this.blData.videoType);
          expect(this.clippy.startTime).toEqual(this.blData.startSeconds);
          return expect(this.clippy.endTime).toEqual(this.blData.endSeconds);
        });
        it("should create a video player if it doesn't exist", function() {
          VideoClipper.modal.open(this.el);
          return expect(VideoClipper.playerV).toEqual(jasmine.any(OmniPlayer));
        });
        it("should show video box", function() {
          var fadeSpy;

          fadeSpy = spyOn($.fn, 'fadeTo').andCallThrough();
          VideoClipper.modal.open(this.el);
          expect($.fn.fadeTo).toHaveBeenCalled();
          return expect(fadeSpy.mostRecentCall.object.selector).toEqual('#bl-vid');
        });
        return it("should show overlay", function() {
          var fadeSpy;

          fadeSpy = spyOn($.fn, 'fadeTo').andCallThrough();
          VideoClipper.modal.open(this.el);
          expect($.fn.fadeTo).toHaveBeenCalled();
          return expect(fadeSpy.calls[0].object.selector).toEqual('#bookMarklet-overlay');
        });
      });
    });
    describe(".checkErrors", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
      });
      it("should parse floats from the  start input box", function() {
        $("input[name='bl-start']").val("300");
        spyOn(window, 'parseFloat').andReturn(300);
        VideoClipper.checkErrors();
        return expect(window.parseFloat).toHaveBeenCalledWith("300");
      });
      it("should parse floats from the  end input box", function() {
        $("input[name='bl-end']").val("300");
        spyOn(window, 'parseFloat').andReturn(300);
        VideoClipper.checkErrors();
        return expect(window.parseFloat).toHaveBeenCalledWith("300");
      });
      describe('if correct', function() {
        beforeEach(function() {
          $("input[name='bl-start']").val("300");
          return $("input[name='bl-end']").val("400");
        });
        it("should remove incorrect highlighting class", function() {
          $("input[name='bl-start']").addClass("bl-incorrect");
          $("input[name='bl-end']").addClass("bl-incorrect");
          VideoClipper.checkErrors();
          expect($("input[name='bl-start']")).not.toHaveClass("bl-incorrect");
          return expect($("input[name='bl-end']")).not.toHaveClass("bl-incorrect");
        });
        return it("should return true", function() {
          return expect(VideoClipper.checkErrors()).toBeTruthy();
        });
      });
      return describe('if incorrect', function() {
        beforeEach(function() {
          $("input[name='bl-start']").val("400");
          return $("input[name='bl-end']").val("300");
        });
        it("should add incorrect highlighting class", function() {
          VideoClipper.checkErrors();
          expect($("input[name='bl-start']")).toHaveClass("bl-incorrect");
          return expect($("input[name='bl-end']")).toHaveClass("bl-incorrect");
        });
        return it('should return false', function() {
          return expect(VideoClipper.checkErrors()).toBeFalsy();
        });
      });
    });
    describe(".getBLData", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
        this.testDataGenerate = encodeURI(VideoClipper.generateBLDataString('generate', this.clippy));
        this.clippy.startTime = '200';
        this.clippy.endTime = '300';
        this.testDataShow = encodeURI(VideoClipper.generateBLDataString('show', this.clippy));
        return $('body').append("<div id='test'></div>");
      });
      afterEach(function() {
        return $('#test').remove();
      });
      it("should check if it has a data-bl attribute", function() {
        var attrSpy, el;

        el = $('#test').attr('data-bl', this.testDataGenerate);
        attrSpy = spyOn($.fn, 'attr').andCallThrough();
        VideoClipper.getBLData(el);
        expect($.fn.attr).toHaveBeenCalledWith('data-bl');
        return expect(attrSpy.calls[0].object).toEqual(el);
      });
      describe("with a data-bl attribute", function() {
        beforeEach(function() {
          return this.el = $('#test').attr('data-bl', this.testDataGenerate);
        });
        it('should get the encoded data from the data-bl attribute', function() {
          var attrSpy;

          attrSpy = spyOn($.fn, 'attr').andCallThrough();
          VideoClipper.getBLData(this.el);
          expect($.fn.attr.calls.length).toEqual(2);
          return expect(attrSpy.calls[1].object).toEqual(this.el);
        });
        it("should parse a JSON object from the data-bl attribute", function() {
          spyOn($, 'parseJSON');
          VideoClipper.getBLData(this.el);
          return expect($.parseJSON).toHaveBeenCalledWith(decodeURI(this.testDataGenerate));
        });
        return it("should produce a valid JSON object with the correct data", function() {
          var blData;

          blData = VideoClipper.getBLData(this.el);
          return expect(blData).toEqual($.parseJSON(decodeURI(this.testDataGenerate)));
        });
      });
      return describe("without a data-bl attribute", function() {
        beforeEach(function() {
          return this.el = $('#test').text(this.testDataShow);
        });
        it('should get the encoded data from the elements tesxt', function() {
          var textSpy;

          textSpy = spyOn($.fn, 'text').andCallThrough();
          VideoClipper.getBLData(this.el);
          expect($.fn.text).toHaveBeenCalled();
          return expect(textSpy.calls[0].object).toEqual(this.el);
        });
        it("should parse a JSON object from the elements text", function() {
          spyOn($, 'parseJSON');
          VideoClipper.getBLData(this.el);
          return expect($.parseJSON).toHaveBeenCalledWith(decodeURI(this.testDataShow));
        });
        return it("should produce a valid JSON object with the correct data", function() {
          var blData;

          blData = VideoClipper.getBLData(this.el);
          return expect(blData).toEqual($.parseJSON(decodeURI(this.testDataShow)));
        });
      });
    });
    describe(".clearInputs", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
      });
      it("should clear values for input box in the snippet box", function() {
        $("input[name='bl-end']").val(200);
        $("input[name='bl-start']").val(300);
        VideoClipper.clearInputs();
        expect($("input[name='bl-end']").val()).toEqual("");
        return expect($("input[name='bl-start']").val()).toEqual("");
      });
      it("should clear values for the textarea in the snippet box", function() {
        $(".bl-URL").text("Testing 1.. 2.. 3..");
        VideoClipper.clearInputs();
        return expect($(".bl-URL").text()).toEqual("Generated URL goes here");
      });
      return it("should remove the bl-incorrect class from the input boxes", function() {
        $("input[name='bl-end']").addClass("bl-incorrect");
        $("input[name='bl-start']").addClass("bl-incorrect");
        VideoClipper.clearInputs();
        expect($("input[name='bl-start']")).not.toHaveClass("bl-incorrect");
        return expect($("input[name='bl-end']")).not.toHaveClass("bl-incorrect");
      });
    });
    describe("#update", function() {
      beforeEach(function() {
        var data, textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
        this.clippy.startTime = '300';
        this.clippy.endTime = '400';
        data = encodeURI(VideoClipper.generateBLDataString('show', this.clippy));
        this.newTag = $("<a rel='blModal' href='#bl-vid' class='bl'>" + data + "</a>").css({
          'background-image': this.reel
        });
        return $('body').append("<div id='test'></div>");
      });
      afterEach(function() {
        return $('#test').remove();
      });
      it("should put the new link into the .bl-URL textarea", function() {
        var textSpy;

        textSpy = spyOn($.fn, 'text').andCallThrough();
        this.clippy.update(this.newTag);
        return expect($('.bl-URL')).toContainText(this.newTag);
      });
      it("should get the question's current contents", function() {
        var contentSpy;

        contentSpy = spyOn($.fn, 'contents').andCallThrough();
        this.clippy.update(this.newTag);
        expect($.fn.contents).toHaveBeenCalled();
        return expect(contentSpy.mostRecentCall.object).toEqual(this.clippy.questionBox);
      });
      describe("that doesn't already have contents", function() {
        return it("the div's text equal the new link", function() {
          expect($('.' + this.clippy.answerClass).contents().length).toEqual(0);
          this.clippy.update(this.newTag);
          return expect($('.' + this.clippy.answerClass).find('a').text()).toEqual(this.newTag.text());
        });
      });
      describe('that already has contents', function() {
        it('should get the questionBox contents', function() {
          spyOn(this.clippy.questionBox, 'contents').andCallThrough();
          this.clippy.update(this.newTag);
          return expect(this.clippy.questionBox.contents).toHaveBeenCalled();
        });
        return it("should iterate through the question's text and html", function() {
          var eachAgent;

          eachAgent = jasmine.createSpyObj('each', ['each']);
          spyOn(this.clippy.questionBox, 'contents').andReturn(eachAgent);
          this.clippy.update(this.newTag);
          return expect(eachAgent.each).toHaveBeenCalled();
        });
      });
      it("should update the question's textarea", function() {
        var newVal, valSpy;

        valSpy = spyOn($.fn, 'val').andCallThrough();
        this.clippy.update(this.newTag);
        newVal = this.clippy.questionBox.html();
        expect($.fn.val).toHaveBeenCalledWith(newVal);
        return expect(valSpy.mostRecentCall.object).toEqual(this.clippy.questionBox.prev());
      });
      it("should make video clips handle clicks", function() {
        this.clippy.update(this.newTag);
        return expect(this.clippy.questionBox.find('[rel*=blModal]')).toHandle('click');
      });
      it("adds a qtip to each '[rel*=blModal]'", function() {
        var qtipSpy;

        qtipSpy = spyOn($.fn, 'qtip');
        this.clippy.update(this.newTag);
        expect($.fn.qtip).toHaveBeenCalled();
        return this.clippy.questionBox.find('[rel*=blModal]').each(function(index, element) {
          return expect(qtipSpy.calls[index].object).toBe($(element));
        });
      });
      return describe('when a video clip is click', function() {
        return it('should open the modal window', function() {
          spyOn(VideoClipper.modal, 'open');
          this.clippy.update(this.newTag);
          $('[rel*=blModal]').click();
          return expect(VideoClipper.modal.open).toHaveBeenCalled();
        });
      });
    });
    describe(".generateTag", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST',
          buttonId: this.testID
        });
        this.el = $('#' + this.testID);
        this.blData = VideoClipper.getBLData(this.el);
        return VideoClipper.modal.open(this.el, this.clippy);
      });
      afterEach(function() {
        return VideoClipper.modal.close();
      });
      it("should get start time from the snippet box", function() {
        var valSpy;

        $("input[name='bl-start']").val("200.50");
        valSpy = spyOn($.fn, "val").andCallThrough();
        VideoClipper.generateTag(this.clippy);
        expect($.fn.val).toHaveBeenCalled();
        expect("" + this.clippy.startTime).toEqual('200.50');
        return expect(valSpy.calls[0].object.selector).toEqual("input[name='bl-start']");
      });
      it("should get end time from the snippet box", function() {
        var valSpy;

        $("input[name='bl-end']").val("300.50");
        valSpy = spyOn($.fn, "val").andCallThrough();
        VideoClipper.generateTag(this.clippy);
        expect($.fn.val).toHaveBeenCalled();
        expect("" + this.clippy.endTime).toEqual('300.50');
        return expect(valSpy.calls[1].object.selector).toEqual("input[name='bl-end']");
      });
      it("should check for errors in the start and end times", function() {
        spyOn(VideoClipper, 'checkErrors').andCallThrough();
        VideoClipper.generateTag(this.clippy);
        return expect(VideoClipper.checkErrors).toHaveBeenCalled();
      });
      describe("with correct values", function() {
        beforeEach(function() {
          $("input[name='bl-start']").val("200.50");
          return $("input[name='bl-end']").val("300.50");
        });
        it("should set the endTime to the video duration if it isn't defined", function() {
          $("input[name='bl-end']").val("");
          spyOn(VideoClipper.player, 'getDuration').andReturn(400);
          VideoClipper.generateTag(this.clippy);
          return expect(VideoClipper.player.getDuration).toHaveBeenCalled();
        });
        it("should generate a show data JSON string", function() {
          spyOn(VideoClipper, 'generateBLDataString').andCallThrough();
          VideoClipper.generateTag(this.clippy);
          return expect(VideoClipper.generateBLDataString).toHaveBeenCalled();
        });
        it("should encode the data string", function() {
          var str;

          spyOn(window, 'encodeURI');
          str = 'Test';
          spyOn(VideoClipper, 'generateBLDataString').andReturn(str);
          VideoClipper.generateTag(this.clippy);
          return expect(window.encodeURI).toHaveBeenCalledWith(str);
        });
        it("should create an a tag with the encodedData in the text", function() {
          var str, tag;

          str = 'Test';
          spyOn(VideoClipper, 'generateBLDataString').andReturn(str);
          tag = VideoClipper.generateTag(this.clippy);
          expect(tag).toBe('a');
          return expect(tag.text()).toEqual(encodeURI(str));
        });
        it("should the clip to the instance's clips", function() {
          var clip, clipAdded, tag, _i, _len, _ref;

          tag = VideoClipper.generateTag(this.clippy);
          clipAdded = false;
          _ref = this.clippy.clips;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            clip = _ref[_i];
            if (clip === tag) {
              clipAdded = true;
            }
          }
          return expect(clipAdded).toBeTruthy;
        });
        return it("should return the tag", function() {
          var tag;

          tag = VideoClipper.generateTag(this.clippy);
          return expect(tag).toBe('a');
        });
      });
      return describe("without correct values", function() {
        return it("should return and empty string", function() {
          spyOn(VideoClipper, 'checkErrors').andReturn(false);
          return expect(VideoClipper.generateTag(this.clippy)).toEqual("");
        });
      });
    });
    describe(".generateBLDataString", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        this.testID = "button-test";
        textareaId = 'bl-text';
        this.vid = '8f7wj_RcqYk';
        this.videoType = 'TEST';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: this.vid,
          videoType: this.videoType,
          buttonId: this.testID
        });
      });
      describe("with a type of 'generate' ", function() {
        beforeEach(function() {
          var dataString;

          dataString = VideoClipper.generateBLDataString('generate', this.clippy);
          return this.blData = $.parseJSON(dataString);
        });
        it('should use the vid of the instance in the JSON string', function() {
          return expect(this.blData.videoId).toEqual(this.vid);
        });
        return it('should use the type of the instance in the JSON string', function() {
          return expect(this.blData.videoType).toEqual(this.videoType);
        });
      });
      describe("with a type of 'show", function() {
        beforeEach(function() {
          var dataString;

          this.startTime = '200';
          this.endTime = '300';
          this.clippy.startTime = this.startTime;
          this.clippy.endTime = this.endTime;
          dataString = VideoClipper.generateBLDataString('show', this.clippy);
          return this.blData = $.parseJSON(dataString);
        });
        it('should use the vid of the instance in the JSON string', function() {
          return expect(this.blData.videoId).toEqual(this.vid);
        });
        it('should use the type of the instance in the JSON string', function() {
          return expect(this.blData.videoType).toEqual(this.videoType);
        });
        it('should use the start time of the instance in the JSON string', function() {
          return expect(this.blData.startSeconds).toEqual(this.startTime);
        });
        return it('should use the end time of the instance in the JSON string', function() {
          return expect(this.blData.endSeconds).toEqual(this.endTime);
        });
      });
      return describe("without an incorrect type", function() {
        return it("should return an empty string", function() {
          return expect(VideoClipper.generateBLDataString('incorrect', this.clippy)).toEqual("");
        });
      });
    });
    describe("#getCaretPosition", function() {
      it('should check to see if there is a window selection', function() {
        spyOn(window, 'getSelection').andReturn(false);
        return expect(window.getSelection).toHaveBeenCalled();
      });
      return describe('and the window selection exists', function() {
        return it('should get the window selection', function() {
          spyOn(window, 'getSelection').andReturn(false);
          return expect(window.getSelection).toHaveBeenCalled();
        });
      });
    });
    describe("when stripping html", function() {
      beforeEach(function() {
        return this.elementHtml = '<a rel="blModal" href="#bl-vid" class="bl">%7B%22start%22:%20%2243.92%22,%20%22end%22:%20%22330%22,%20%22type%22:%20%22show%22,%20%22modal%22:%20%22#bl-vid%22,%20%22video%22:%20%7B%22id%22:%20%228f7wj_RcqYk%22,%20%22type%22:%20%22YT%22%7D%7D</a>';
      });
      return it("should create a div", function() {
        spyOn(document, "createElement").andCallThrough();
        VideoClipper.stripHTML(this.elementHtml);
        return expect(document.createElement).toHaveBeenCalledWith("DIV");
      });
    });
    describe(".secondsToTime", function() {
      describe("with 0 seconds, minutes and hours of time", function() {
        it("returns 0.00", function() {
          return expect(VideoClipper.secondsToTime("0")).toEqual("0.00");
        });
        return it('returns an empty string if given an empty string', function() {
          return expect(VideoClipper.secondsToTime("")).toEqual("");
        });
      });
      describe("with 0 minutes and hours of time", function() {
        return it('goes to two decimal places', function() {
          return expect(VideoClipper.secondsToTime("12.123456789")).toEqual("12.12");
        });
      });
      describe("with 0 hours of time", function() {
        it('goes to two decimal places', function() {
          return expect(VideoClipper.secondsToTime("602.123456789")).toEqual("10:02.12");
        });
        it('returns minutes of magnitude 10^0 formatted as M:SS.XX', function() {
          expect(VideoClipper.secondsToTime("60")).toEqual("1:00.00");
          expect(VideoClipper.secondsToTime("72.1234567")).toEqual("1:12.12");
          expect(VideoClipper.secondsToTime("300.1234567")).toEqual("5:00.12");
          return expect(VideoClipper.secondsToTime("599.994")).toEqual("9:59.99");
        });
        return it('returns minutes of magnitude 10^1 formatted as MM:SS.XX', function() {
          expect(VideoClipper.secondsToTime("600")).toEqual("10:00.00");
          expect(VideoClipper.secondsToTime("721.1234567")).toEqual("12:01.12");
          expect(VideoClipper.secondsToTime("1842.1234567")).toEqual("30:42.12");
          return expect(VideoClipper.secondsToTime("3599.994")).toEqual("59:59.99");
        });
      });
      return describe("with hours, minutes and seconds of time", function() {
        it('goes to two decimal places', function() {
          return expect(VideoClipper.secondsToTime("3612.123456789")).toEqual("1:00:12.12");
        });
        it('returns hours of magnitude 10^0 formatted as H:MM:SS.XX', function() {
          expect(VideoClipper.secondsToTime("3600")).toEqual("1:00:00.00");
          expect(VideoClipper.secondsToTime("7207")).toEqual("2:00:07.00");
          expect(VideoClipper.secondsToTime("10812")).toEqual("3:00:12.00");
          expect(VideoClipper.secondsToTime("14521")).toEqual("4:02:01.00");
          expect(VideoClipper.secondsToTime("18780.123")).toEqual("5:13:00.12");
          return expect(VideoClipper.secondsToTime("35999.994")).toEqual("9:59:59.99");
        });
        return it('returns hours of magnitude 10^1 formatted as HH:MM:SS.XX', function() {
          expect(VideoClipper.secondsToTime("36000")).toEqual("10:00:00.00");
          expect(VideoClipper.secondsToTime("330207")).toEqual("91:43:27.00");
          expect(VideoClipper.secondsToTime("298812")).toEqual("83:00:12.00");
          expect(VideoClipper.secondsToTime("266521")).toEqual("74:02:01.00");
          expect(VideoClipper.secondsToTime("234780.123")).toEqual("65:13:00.12");
          return expect(VideoClipper.secondsToTime("359999.994")).toEqual("99:59:59.99");
        });
      });
    });
    describe(".timeToSeconds", function() {
      describe("with 0 seconds, minutes and hours of time", function() {
        return it('returns 0.00', function() {
          return expect(VideoClipper.timeToSeconds("0.00")).toEqual('0.00');
        });
      });
      describe("with 0 minutes and hours of time", function() {
        return it('returns the right number of seconds', function() {
          expect(VideoClipper.timeToSeconds("1.00")).toEqual('1.00');
          expect(VideoClipper.timeToSeconds("01.00")).toEqual('1.00');
          expect(VideoClipper.timeToSeconds("02.12")).toEqual('2.12');
          expect(VideoClipper.timeToSeconds("26.214")).toEqual('26.21');
          return expect(VideoClipper.timeToSeconds("59.9949")).toEqual('59.99');
        });
      });
      describe("with 0 hours of time", function() {
        return it('returns the right number of seconds', function() {
          expect(VideoClipper.timeToSeconds("1:00.00")).toEqual("60.00");
          expect(VideoClipper.timeToSeconds("1:12.12")).toEqual("72.12");
          expect(VideoClipper.timeToSeconds("5:00.12")).toEqual("300.12");
          expect(VideoClipper.timeToSeconds("9:59.99")).toEqual("599.99");
          expect(VideoClipper.timeToSeconds("10:00.00")).toEqual("600.00");
          expect(VideoClipper.timeToSeconds("12:01.12")).toEqual("721.12");
          expect(VideoClipper.timeToSeconds("30:42.12")).toEqual("1842.12");
          return expect(VideoClipper.timeToSeconds("59:59.99")).toEqual("3599.99");
        });
      });
      return describe("with hours, minutes and seconds of time", function() {
        expect(VideoClipper.timeToSeconds("1:00:00.00")).toEqual("3600.00");
        expect(VideoClipper.timeToSeconds("2:00:07.00")).toEqual("7207.00");
        expect(VideoClipper.timeToSeconds("3:00:12.00")).toEqual("10812.00");
        expect(VideoClipper.timeToSeconds("4:02:01.00")).toEqual("14521.00");
        expect(VideoClipper.timeToSeconds("5:13:00.12")).toEqual("18780.12");
        expect(VideoClipper.timeToSeconds("9:59:59.99")).toEqual("35999.99");
        expect(VideoClipper.timeToSeconds("10:00:00.00")).toEqual("36000.00");
        expect(VideoClipper.timeToSeconds("91:43:27.00")).toEqual("330207.00");
        expect(VideoClipper.timeToSeconds("83:00:12.00")).toEqual("298812.00");
        expect(VideoClipper.timeToSeconds("74:02:01.00")).toEqual("266521.00");
        expect(VideoClipper.timeToSeconds("65:13:00.12")).toEqual("234780.12");
        return expect(VideoClipper.timeToSeconds("99:59:59.99")).toEqual("359999.99");
      });
    });
    describe(".getEndTime", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST'
        });
      });
      it("gets the value of input[name='bl-end']", function() {
        var valSpy;

        valSpy = spyOn($.fn, 'val').andCallThrough();
        VideoClipper.getEndTime();
        expect($.fn.val).toHaveBeenCalled();
        return expect(valSpy.mostRecentCall.object.selector).toBe("input[name='bl-end']");
      });
      return it("passes the value through .timeToSeconds", function() {
        var some_val;

        some_val = "SOME VALUE";
        $("input[name='bl-end']").val(some_val);
        spyOn(VideoClipper, 'timeToSeconds');
        VideoClipper.getEndTime();
        return expect(VideoClipper.timeToSeconds).toHaveBeenCalledWith(some_val);
      });
    });
    describe(".getStartTime", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST'
        });
      });
      it("gets the value of input[name='bl-start']", function() {
        var valSpy;

        valSpy = spyOn($.fn, 'val').andCallThrough();
        VideoClipper.getStartTime();
        expect($.fn.val).toHaveBeenCalled();
        return expect(valSpy.mostRecentCall.object.selector).toBe("input[name='bl-start']");
      });
      return it("passes the value through .timeToSeconds", function() {
        var some_val;

        some_val = "SOME VALUE";
        $("input[name='bl-start']").val(some_val);
        spyOn(VideoClipper, 'timeToSeconds');
        VideoClipper.getStartTime();
        return expect(VideoClipper.timeToSeconds).toHaveBeenCalledWith(some_val);
      });
    });
    describe(".setEndTime", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST'
        });
      });
      it('calls .secondsToTime with the parameter val', function() {
        var val;

        val = "SOME VALUE";
        spyOn(VideoClipper, 'secondsToTime');
        VideoClipper.setEndTime(val);
        return expect(VideoClipper.secondsToTime).toHaveBeenCalledWith(val);
      });
      it("sets the 'input[name='bl-end'] box with the time value", function() {
        var val, val2, valSpy;

        val = 'SOME VALUE';
        val2 = 'SOME VALUE ROUND 2';
        spyOn(VideoClipper, 'secondsToTime').andReturn(val2);
        valSpy = spyOn($.fn, 'val').andCallThrough();
        VideoClipper.setEndTime(val);
        expect($.fn.val).toHaveBeenCalledWith(val2);
        return expect(valSpy.mostRecentCall.object.selector).toEqual("input[name='bl-end']");
      });
      return it('should return the value from secondsToTime', function() {
        var val, val2;

        val = 'SOME VALUE';
        val2 = 'SOME VALUE ROUND 2';
        spyOn(VideoClipper, 'secondsToTime').andReturn(val2);
        return expect(VideoClipper.setEndTime(val)).toEqual(val2);
      });
    });
    return describe(".setStartTime", function() {
      beforeEach(function() {
        var textareaId;

        VideoClipper.cleanUp();
        loadFixtures('question.html');
        textareaId = 'bl-text';
        return this.clippy = new VideoClipper({
          textareaId: textareaId,
          videoId: '8f7wj_RcqYk',
          videoType: 'TEST'
        });
      });
      it('calls .secondsToTime with the parameter val', function() {
        var val;

        val = "SOME VALUE";
        spyOn(VideoClipper, 'secondsToTime');
        VideoClipper.setStartTime(val);
        return expect(VideoClipper.secondsToTime).toHaveBeenCalledWith(val);
      });
      it("sets the 'input[name='bl-start'] box with the time value", function() {
        var val, val2, valSpy;

        val = 'SOME VALUE';
        val2 = 'SOME VALUE ROUND 2';
        spyOn(VideoClipper, 'secondsToTime').andReturn(val2);
        valSpy = spyOn($.fn, 'val').andCallThrough();
        VideoClipper.setStartTime(val);
        expect($.fn.val).toHaveBeenCalledWith(val2);
        return expect(valSpy.mostRecentCall.object.selector).toEqual("input[name='bl-start']");
      });
      return it('should return the value from secondsToTime', function() {
        var val, val2;

        val = 'SOME VALUE';
        val2 = 'SOME VALUE ROUND 2';
        spyOn(VideoClipper, 'secondsToTime').andReturn(val2);
        return expect(VideoClipper.setStartTime(val)).toEqual(val2);
      });
    });
  });

}).call(this);
